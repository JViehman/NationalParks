library(dplyr)
library(ggplot2)
options(repos = c(CRAN = "http://cran.rstudio.com"))
npsdat <- read.csv("~/GitHub/national_parks/Data Files/NPS_with_Poverty_1995-2018.csv")
npsdat$publicAcres = npsdat$NPS.Fee.Acres/npsdat$Gross.Area.Acres
npsdat$privateAcres = npsdat$Private.Acres/npsdat$Gross.Area.Acres
head(npsdat$entranceFees)
npsdat$fees = sub("\\).*", "", sub(".*\\(", "", npsdat$entranceFees))
npsdat$fees<-gsub("\\..*","",npsdat$fees)
npsdat$fees = strtoi(npsdat$fees)
head(npsdat$fees)
table(npsdat$fees)
X = subset(npsdat, select = -c(UnitCode, latitude, longitude, DateCreated, NPS.Fee.Acres, Private.Acres, Date, Month, RecreationVisits, activities, topics, entranceFees, RecreationHours))
colnames(X)
Y = npsdat$RecreationVisits
sapply(X, function(x) sum(is.na(x)))
sum(is.na(Y))
missingAge = X[is.na(X$Age),]
X$Age[which(X$ParkName == "Oklahoma City")] <- X$Year[which(X$ParkName == "Oklahoma City")] - 1997
X$Age[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- X$Year[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] - 1976
X$Gross.Area.Acres[which(X$ParkName == "Oklahoma City")] <- 3.3
X$Gross.Area.Acres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 0.25
X$publicAcres[which(X$ParkName == "Oklahoma City")] <- 3.12/3.3
X$privateAcres[which(X$ParkName == "Oklahoma City")] <- (3.3-3.12)/3.3
X$publicAcres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 1
X$privateAcres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 0
missingfee = X[is.na(X$fees),]
length(unique(missingfee$ParkName))
length(unique(X$ParkName))
X$fees[which(X$ParkName == "Casa Grande Ruins")] <- 10
X$fees[which(X$ParkName == "Devils Postpile")] <- 10
X$fees[which(X$ParkName == "City Of Rocks")] <- 0
X$fees[which(X$ParkName == "Lincoln Boyhood")] <- 0
X$fees[which(X$ParkName == "Scotts Bluff")] <- 0
X$fees[which(X$ParkName == "Carlsbad Caverns")] <- 15
X$fees[which(X$ParkName == "Pecos")] <- 0
X$fees[which(X$ParkName == "Stonewall")] <- 0
X$fees[which(X$ParkName == "Eisenhower")] <- 0
X$fees[which(X$ParkName == "Jewel Cave")] <- 8 # This is the average cost across several types of tours and tickets
X$fees[which(X$fees>0)] = 1
missingacres = X[is.na(X$Gross.Area.Acres),]
X$Gross.Area.Acres[which(X$ParkName == "Aniakchak")] = 601294
X$publicAcres[which(X$ParkName == "Aniakchak")] = 0
X$privateAcres[which(X$ParkName == "Aniakchak")] = 1
X %>%
count(ParkType)
X %>%
count(NPFlag)
install.packages("corrplot")
library(corrplot)
quantmat = subset(X, select = -c(States, ParkName, ParkType, NPFlag, Region, MonthName))
quantmat$Month = npsdat$Month
quantmat$Visits = npsdat$RecreationVisits
head(quantmat)
quantcor = cor(quantmat)
corrplot(quantcor, order = "hclust")
cor(Y, X$Poverty.Percent..Age.0.17)
cor(Y, X$Poverty.Percent..Age.5.17.in.Families)
cor(Y, X$Poverty.Percent..Age.0.4)
cor(Y, X$Poverty.Percent..All.Ages)
quantmat2 = subset(quantmat, select = c(Poverty.Percent..Age.5.17.in.Families, Age, publicAcres, Visits, fees, logAcres, Month, privateAcres, Year, Median.Household.Income))
X$logAcres = log(X$Gross.Area.Acres+1)
ggplot(data = X) +
geom_histogram(mapping = aes(x = logAcres), )
X = subset(X, select = -c(Gross.Area.Acres))
quantmat2 = subset(quantmat, select = c(Poverty.Percent..Age.5.17.in.Families, Age, publicAcres, Visits, fees, logAcres, Month, privateAcres, Year, Median.Household.Income))
options(repos = c(CRAN = "http://cran.rstudio.com"))
knitr::opts_chunk$set(echo = TRUE)
install.packages("stringr")
library(stringr)
library(dplyr)
library(ggplot2)
npsdat <- read.csv("~/GitHub/national_parks/Data Files/NPS_with_Poverty_1995-2018.csv")
npsdat$publicAcres = npsdat$NPS.Fee.Acres/npsdat$Gross.Area.Acres
npsdat$privateAcres = npsdat$Private.Acres/npsdat$Gross.Area.Acres
head(npsdat$entranceFees)
npsdat$fees = sub("\\).*", "", sub(".*\\(", "", npsdat$entranceFees))
npsdat$fees<-gsub("\\..*","",npsdat$fees)
npsdat$fees = strtoi(npsdat$fees)
head(npsdat$fees)
table(npsdat$fees)
X = subset(npsdat, select = -c(UnitCode, latitude, longitude, DateCreated, NPS.Fee.Acres, Private.Acres, Date, Month, RecreationVisits, activities, topics, entranceFees, RecreationHours))
colnames(X)
Y = npsdat$RecreationVisits
sapply(X, function(x) sum(is.na(x)))
sum(is.na(Y))
missingAge = X[is.na(X$Age),]
X$Age[which(X$ParkName == "Oklahoma City")] <- X$Year[which(X$ParkName == "Oklahoma City")] - 1997
X$Age[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- X$Year[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] - 1976
X$Gross.Area.Acres[which(X$ParkName == "Oklahoma City")] <- 3.3
X$Gross.Area.Acres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 0.25
X$publicAcres[which(X$ParkName == "Oklahoma City")] <- 3.12/3.3
X$privateAcres[which(X$ParkName == "Oklahoma City")] <- (3.3-3.12)/3.3
X$publicAcres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 1
X$privateAcres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 0
missingfee = X[is.na(X$fees),]
length(unique(missingfee$ParkName))
length(unique(X$ParkName))
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("stringr")
library(stringr)
library(dplyr)
library(ggplot2)
X$logAcres = log(X$Gross.Area.Acres+1)
ggplot(data = X) +
geom_histogram(mapping = aes(x = logAcres), )
X = subset(X, select = -c(Gross.Area.Acres))
View(X)
hist(Y)
Y[which(Y<0)] = 0
Y = log(Y+1)
hist(Y)
install.packages("corrplot")
library(corrplot)
quantmat = subset(X, select = -c(States, ParkName, ParkType, NPFlag, Region, MonthName))
quantmat$Month = npsdat$Month
quantmat$Visits = npsdat$RecreationVisits
head(quantmat)
quantcor = cor(quantmat)
corrplot(quantcor, order = "hclust")
options(repos = c(CRAN = "http://cran.rstudio.com"))
knitr::opts_chunk$set(echo = TRUE)
install.packages("stringr")
library(stringr)
library(dplyr)
library(ggplot2)
npsdat <- read.csv("~/GitHub/national_parks/Data Files/NPS_with_Poverty_1995-2018.csv")
npsdat$publicAcres = npsdat$NPS.Fee.Acres/npsdat$Gross.Area.Acres
npsdat$privateAcres = npsdat$Private.Acres/npsdat$Gross.Area.Acres
head(npsdat$entranceFees)
npsdat$fees = sub("\\).*", "", sub(".*\\(", "", npsdat$entranceFees))
npsdat$fees<-gsub("\\..*","",npsdat$fees)
npsdat$fees = strtoi(npsdat$fees)
head(npsdat$fees)
table(npsdat$fees)
X = subset(npsdat, select = -c(UnitCode, latitude, longitude, DateCreated, NPS.Fee.Acres, Private.Acres, Date, Month, RecreationVisits, activities, topics, entranceFees, RecreationHours))
colnames(X)
Y = npsdat$RecreationVisits
sapply(X, function(x) sum(is.na(x)))
sum(is.na(Y))
missingAge = X[is.na(X$Age),]
X$Age[which(X$ParkName == "Oklahoma City")] <- X$Year[which(X$ParkName == "Oklahoma City")] - 1997
X$Age[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- X$Year[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] - 1976
X$Gross.Area.Acres[which(X$ParkName == "Oklahoma City")] <- 3.3
X$Gross.Area.Acres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 0.25
X$publicAcres[which(X$ParkName == "Oklahoma City")] <- 3.12/3.3
X$privateAcres[which(X$ParkName == "Oklahoma City")] <- (3.3-3.12)/3.3
X$publicAcres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 1
X$privateAcres[which(X$ParkName == "Klondike Gold Rush - Seattle Unit")] <- 0
missingfee = X[is.na(X$fees),]
length(unique(missingfee$ParkName))
length(unique(X$ParkName))
X$fees[which(X$ParkName == "Casa Grande Ruins")] <- 10
X$fees[which(X$ParkName == "Devils Postpile")] <- 10
X$fees[which(X$ParkName == "City Of Rocks")] <- 0
X$fees[which(X$ParkName == "Lincoln Boyhood")] <- 0
X$fees[which(X$ParkName == "Scotts Bluff")] <- 0
X$fees[which(X$ParkName == "Carlsbad Caverns")] <- 15
X$fees[which(X$ParkName == "Pecos")] <- 0
X$fees[which(X$ParkName == "Stonewall")] <- 0
X$fees[which(X$ParkName == "Eisenhower")] <- 0
X$fees[which(X$ParkName == "Jewel Cave")] <- 8 # This is the average cost across several types of tours and tickets
X$fees[which(X$fees>0)] = 1
missingacres = X[is.na(X$Gross.Area.Acres),]
X$Gross.Area.Acres[which(X$ParkName == "Aniakchak")] = 601294
X$publicAcres[which(X$ParkName == "Aniakchak")] = 0
X$privateAcres[which(X$ParkName == "Aniakchak")] = 1
X %>%
count(ParkType)
X %>%
count(NPFlag)
X %>%
count(Region)
ggplot(data = X) +
geom_histogram(mapping = aes(x = Age), binwidth = 5)
ggplot(data = X) +
geom_histogram(mapping = aes(x = Gross.Area.Acres))
X$logAcres = log(X$Gross.Area.Acres+1)
ggplot(data = X) +
geom_histogram(mapping = aes(x = logAcres), )
X = subset(X, select = -c(Gross.Area.Acres))
ggplot(data = X) +
geom_histogram(mapping = aes(x = Poverty.Percent..All.Ages), binwidth = 1)
ggplot(data = X) +
geom_histogram(mapping = aes(x = Median.Household.Income))
hist(Y)
Y[which(Y<0)] = 0
Y = log(Y+1)
hist(Y)
install.packages("corrplot")
library(corrplot)
quantmat = subset(X, select = -c(States, ParkName, ParkType, NPFlag, Region, MonthName))
quantmat$Month = npsdat$Month
quantmat$Visits = npsdat$RecreationVisits
head(quantmat)
quantcor = cor(quantmat)
corrplot(quantcor, order = "hclust")
cor(Y, X$Poverty.Percent..Age.0.17)
cor(Y, X$Poverty.Percent..Age.5.17.in.Families)
cor(Y, X$Poverty.Percent..Age.0.4)
cor(Y, X$Poverty.Percent..All.Ages)
quantmat2 = subset(quantmat, select = c(Poverty.Percent..Age.5.17.in.Families, Age, publicAcres, Visits, fees, logAcres, Month, privateAcres, Year, Median.Household.Income))
quantcor = cor(quantmat2, method = "spearman")
round(quantcor, 2)
Xquant = subset(X, select = -c(States, ParkName, Poverty.Percent..Age.0.17, Poverty.Percent..Age.0.4, Poverty.Percent..All.Ages, privateAcres, MonthName))
Xquant$Visits = Y
Xquant$Month = npsdat$Month
Xquant$Region= as.numeric(factor(X$Region))
Xquant$ParkType= as.numeric(factor(X$ParkType))
sapply(X, typeof)
#Xquant = sapply(Xquant, as.numeric)
install.packages("knor")
install.packages("factoextra")
install.packages("ggpubr")
library(factoextra)
library(knor)
library(ggpubr)
pc = prcomp(Xquant, center = TRUE, scale = TRUE)
plot(pc)
summary(pc)
comp = matrix(pc$x[,1:9])
require(knor)
nthread <- 4
K = 3
kmeans.out <- Kmeans(comp, K, iter.max = 100, nthread=nthread)
names(kmeans.out)
install.packages("RColorBrewer")
#install.packages(scales)
library(RColorBrewer)
#library(scales)
palette(alpha(brewer.pal(9,'Set1'), 0.5))
plot(Y, col=kmeans.out$cluster, pch=16)
require(knor)
nthread <- 4
K = 3
kmeans2.out <- Kmeans(scale(Xquant), K, iter.max = 100, nthread=nthread)
plot(Y, col=kmeans2.out$cluster, pch=16)
frame = data.frame(Y, Xquant, kmeans2.out$cluster)
#names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
head(frame)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
unique(cluster1$States)
length(unique(cluster1$States))
unique(cluster2$States)
length(unique(cluster2$States))
unique(cluster3$States)
length(unique(cluster3$States))
mean(exp(cluster1$Y))
summary(cluster1$fees)
summary(cluster2$fees)
summary(cluster3$Region)
names(cluster3)
install.packages("Hmisc")
library(Hmisc)
Hmisc::describe(cluster1)
Xquant$Visits = Y
Xquant$Month = npsdat$Month
Xquant$Region= as.numeric(factor(X$Region))
Xquant$ParkType= as.numeric(factor(X$ParkType))
sapply(Xquant, typeof)
#Xquant = sapply(Xquant, as.numeric)
Xquant$Visits = Y
Xquant$Month = npsdat$Month
Xquant$Region= as.numeric(factor(X$Region))
Xquant$ParkType= as.numeric(factor(X$ParkType))
sapply(Xquant, typeof)
Xquant = sapply(Xquant, as.numeric)
install.packages("knor")
install.packages("factoextra")
install.packages("ggpubr")
library(factoextra)
library(knor)
library(ggpubr)
install.packages("knor")
install.packages("factoextra")
install.packages("ggpubr")
pc = prcomp(Xquant, center = TRUE, scale = TRUE)
plot(pc)
summary(pc)
comp = matrix(pc$x[,1:9])
require(knor)
nthread <- 4
K = 3
kmeans.out <- Kmeans(comp, K, iter.max = 100, nthread=nthread)
names(kmeans.out)
install.packages("RColorBrewer")
#install.packages(scales)
library(RColorBrewer)
#library(scales)
install.packages("RColorBrewer")
palette(alpha(brewer.pal(9,'Set1'), 0.5))
plot(Y, col=kmeans.out$cluster, pch=16)
require(knor)
nthread <- 4
K = 3
kmeans2.out <- Kmeans(scale(Xquant), K, iter.max = 100, nthread=nthread)
plot(Y, col=kmeans2.out$cluster, pch=16)
frame = data.frame(Y, Xquant, kmeans2.out$cluster)
#names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
head(frame)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
unique(cluster1$States)
length(unique(cluster1$States))
mean(exp(cluster1$Y))
summary(cluster1$fees)
summary(cluster2$fees)
summary(cluster3$Region)
names(cluster3)
Xquant = subset(X, select = -c(States, ParkName, Poverty.Percent..Age.0.17, Poverty.Percent..Age.0.4, Poverty.Percent..All.Ages, privateAcres, MonthName))
Xquantclust = subset(X, select = -c(States, ParkName, Poverty.Percent..Age.0.17, Poverty.Percent..Age.0.4, Poverty.Percent..All.Ages, privateAcres, MonthName))
Xquant$Visits = Y
Xquant$Month = npsdat$Month
Xquant$Region= as.numeric(factor(X$Region))
Xquant$ParkType= as.numeric(factor(X$ParkType))
sapply(Xquant, typeof)
Xquant = sapply(Xquant, as.numeric)
Xquantclust = subset(X, select = -c(States, ParkName, Poverty.Percent..Age.0.17, Poverty.Percent..Age.0.4, Poverty.Percent..All.Ages, privateAcres, MonthName))
Xquantclust$Visits = Y
Xquantclust$Month = npsdat$Month
Xquantclust$Region= factor(X$Region)
Xquantclust$ParkType= factor(X$ParkType)
sapply(Xquant, typeof)
Xquantclust$Visits = Y
Xquantclust$Month = npsdat$Month
Xquantclust$Region= factor(X$Region)
Xquantclust$ParkType= factor(X$ParkType)
View(Xquantclust)
pc = prcomp(Xquant, center = TRUE, scale = TRUE)
plot(pc)
summary(pc)
require(knor)
nthread <- 4
K = 3
kmeans2.out <- Kmeans(scale(Xquantclust), K, iter.max = 100, nthread=nthread)
frame = data.frame(Y, Xquant, kmeans2.out$cluster)
#names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
head(frame)
require(knor)
nthread <- 4
K = 3
kmeans2.out <- Kmeans(scale(Xquant), K, iter.max = 100, nthread=nthread)
plot(Y, col=kmeans2.out$cluster, pch=16)
frame = data.frame(Y, Xquantclust, kmeans2.out$cluster)
#names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
head(frame)
frame = data.frame(npsdat.ParkName, Y, Xquantclust, kmeans2.out$cluster)
frame = data.frame(npsdat$ParkName, Y, Xquantclust, kmeans2.out$cluster)
names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
head(frame)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
frame = data.frame(Y, Xquantclust, kmeans2.out$cluster)
#names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
head(frame)
install.packages("summarytools")
library(summarytools)
dfSummary(cluster1)
frame = data.frame(Y, Xquantclust, kmeans2.out$cluster)
#names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
frame = select(frame, -c(Year))
head(frame)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
mean(exp(cluster1$Y))
summary(cluster1$fees)
summary(cluster2$fees)
summary(cluster3$Region)
names(cluster3)
frame = data.frame(exp(Y), Xquantclust, kmeans2.out$cluster)
#names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
frame = select(frame, -c(Year))
head(frame)
dfSummary(cluster1)
dfSummary(cluster2)
dfSummary(cluster3)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
summary(cluster1)
install.packages("arsenal")
library(arsenal)
table_one <- tableby(Cluster ~ ., data = frame)
summary(table_one, title = "NPS Clusters")
table_one <- tableby(Cluster ~ ., data = frame)
table_one
View(table_one)
table_one <- tableby(Cluster ~ ., data = frame)
print(table_one)
table_one <- tableby(Cluster ~ ., data = frame)
summary(table_one)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
summary(cluster1)
summary(cluster2)
summary(cluster3)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
cat("Cluster 1 Summary: ", summary(cluster1), "\n")
cat("\nCluster 2 Summary: ", summary(cluster2), "\n")
cat("\nCluster 3 Summary: ", summary(cluster3), "\n")
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
print("Cluster 1 Summary: \n")
summary(cluster1)
print("\nCluster 2 Summary: \n")
summary(cluster2)
print("\nCluster3 Summary: \n")
summary(cluster3)
require(knor)
nthread <- 4
K = 3
kmeans2.out <- Kmeans(scale(Xquant), K, iter.max = 100, nthread=nthread)
plot(Y, col=kmeans2.out$cluster, pch=16, ylab = "Log Visits")
frame = data.frame(exp(Y), Xquantclust, kmeans2.out$cluster)
#names(frame)[names(frame) == "npsdat.ParkName"] <- "ParkName"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
names(frame)[names(frame) == "Poverty.Percent..Age.5.17.in.Families"] <- "Poverty"
frame = select(frame, -c(Year))
head(frame)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
print("Cluster 1 Summary: \n")
table(summary(cluster1))
print("\nCluster 2 Summary: \n")
table(summary(cluster2))
print("\nCluster3 Summary: \n")
table(summary(cluster3))
frame = data.frame(exp(Y), Xquantclust, kmeans2.out$cluster)
names(frame)[names(frame) == "exp.Y."] <- "Visitors"
names(frame)[names(frame) == "kmeans2.out.cluster"] <- "Cluster"
names(frame)[names(frame) == "Poverty.Percent..Age.5.17.in.Families"] <- "Poverty"
frame = select(frame, -c(Year))
head(frame)
cluster1 = frame[frame$Cluster == 1,]
cluster2 = frame[frame$Cluster == 2,]
cluster3 = frame[frame$Cluster == 3,]
print("Cluster 1 Summary: \n")
summary(cluster1)
print("\nCluster 2 Summary: \n")
summary(cluster2)
print("\nCluster3 Summary: \n")
summary(cluster3)
library(gtsummary)
install.packages("gtsummary")
library(gtsummary)
install.packages("gtsummary")
install.packages("gtsummary")
library(gtsummary)
library(tidyr)
# make dataset with a few variables to summarize
shortclust1 <- cluster1 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
shortclust2 <- cluster2 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
shortclust3 <- cluster3 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
# summarize the data with our package
table1 <- tbl_summary(trial2)
install.packages(c("backports", "broom", "car", "cli", "clipr", "colorspace", "data.table", "digest", "doParallel", "foreach", "glue", "igraph", "iterators", "jsonlite", "knitr", "labeling", "lava", "lme4", "magick", "matrixStats", "openxlsx", "quantreg", "R6", "RcppArmadillo", "readr", "recipes", "rlang", "rmarkdown", "rstudioapi", "sp", "SQUAREM", "statmod", "stringi", "testthat", "tibble", "tinytex", "vctrs", "withr", "xfun"))
install.packages(c("boot", "broom", "callr", "class", "coda", "codetools", "covr", "dbplyr", "devtools", "dplyr", "DT", "e1071", "ellipse", "EnvStats", "flexmix", "fs", "GDAtools", "generics", "git2r", "httr", "KernSmooth", "lubridate", "MASS", "MCMCpack", "mgcv", "mnormt", "modelr", "nlme", "nnet", "openssl", "processx", "ps", "raster", "rematch2", "remotes", "rex", "rgdal", "roxygen2", "rversions", "rvest", "sn", "spatial", "spData", "spdep", "survival", "sys", "tidyr", "usethis", "writexl"), lib="D:/R-3.6.2/library")
install.packages(c("backports", "broom", "car", "cli", "clipr", "colorspace", "data.table", "digest", "doParallel", "foreach", "glue", "igraph", "iterators", "jsonlite", "knitr", "labeling", "lava", "lme4", "magick", "matrixStats", "openxlsx", "quantreg", "R6", "RcppArmadillo", "readr", "recipes", "rlang", "rmarkdown", "rstudioapi", "sp", "SQUAREM", "statmod", "stringi", "testthat", "tibble", "tinytex", "vctrs", "withr", "xfun"))
install.packages(c("backports", "broom", "car", "cli", "clipr", "colorspace", "data.table", "digest", "doParallel", "foreach", "glue", "igraph", "iterators", "jsonlite", "knitr", "labeling", "lava", "lme4", "magick", "matrixStats", "openxlsx", "quantreg", "R6", "RcppArmadillo", "readr", "recipes", "rlang", "rmarkdown", "rstudioapi", "sp", "SQUAREM", "statmod", "stringi", "testthat", "tibble", "tinytex", "vctrs", "withr", "xfun"))
install.packages(c("backports", "broom", "car", "cli", "clipr", "colorspace", "data.table", "digest", "doParallel", "foreach", "glue", "igraph", "iterators", "jsonlite", "knitr", "labeling", "lava", "lme4", "magick", "matrixStats", "openxlsx", "quantreg", "R6", "RcppArmadillo", "readr", "recipes", "rlang", "rmarkdown", "rstudioapi", "sp", "SQUAREM", "statmod", "stringi", "testthat", "tibble", "tinytex", "vctrs", "withr", "xfun"))
install.packages(c("backports", "broom", "car", "cli", "clipr", "colorspace", "data.table", "digest", "doParallel", "foreach", "glue", "igraph", "iterators", "jsonlite", "knitr", "labeling", "lava", "lme4", "magick", "matrixStats", "openxlsx", "quantreg", "R6", "RcppArmadillo", "readr", "recipes", "rlang", "rmarkdown", "rstudioapi", "sp", "SQUAREM", "statmod", "stringi", "testthat", "tibble", "tinytex", "vctrs", "withr", "xfun"))
install.packages(c("backports", "broom", "car", "cli", "clipr", "colorspace", "data.table", "digest", "doParallel", "foreach", "glue", "igraph", "iterators", "jsonlite", "knitr", "labeling", "lava", "lme4", "magick", "matrixStats", "openxlsx", "quantreg", "R6", "RcppArmadillo", "readr", "recipes", "rlang", "rmarkdown", "rstudioapi", "sp", "SQUAREM", "statmod", "stringi", "testthat", "tibble", "tinytex", "vctrs", "withr", "xfun"))
install.packages(c("backports", "broom", "car", "cli", "clipr", "colorspace", "data.table", "digest", "doParallel", "foreach", "glue", "igraph", "iterators", "jsonlite", "knitr", "labeling", "lava", "lme4", "magick", "matrixStats", "openxlsx", "quantreg", "R6", "RcppArmadillo", "readr", "recipes", "rlang", "rmarkdown", "rstudioapi", "sp", "SQUAREM", "statmod", "stringi", "testthat", "tibble", "tinytex", "vctrs", "withr", "xfun"))
knitr::opts_chunk$set(echo = TRUE)
install.packages("stringr")
library(stringr)
library(dplyr)
library(ggplot2)
install.packages("gtsummary")
library(gtsummary)
# make dataset with a few variables to summarize
shortclust1 <- cluster1 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
shortclust2 <- cluster2 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
shortclust3 <- cluster3 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
# summarize the data with our package
table1 <- tbl_summary(trial2)
# make dataset with a few variables to summarize
shortclust1 <- cluster1 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
shortclust2 <- cluster2 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
shortclust3 <- cluster3 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
# summarize the data with our package
table1 <- tbl_summary(shortclust1)
# make dataset with a few variables to summarize
shortclust1 <- cluster1 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
shortclust2 <- cluster2 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
shortclust3 <- cluster3 %>% select(Visitors, Region, Poverty, Median.Household.Income, publicAcres, fees)
# summarize the data with our package
table1 <- tbl_summary(shortclust1)
table2 <- tbl_summary(shortclust2)
table3 <- tbl_summary(shortclust3)
table1
table2
table3
